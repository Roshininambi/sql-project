#1.What is the total revenue generated from all rentals in the database? 

select sum(amount) as revenue from payment;


#2.	How many rentals were made in each month_name? 

select month(rental_date) as month,count(*) as total from rental
group by month(rental_date)
order by month;


#3.What is the rental rate of the film with the longest title in the database?

select rental_rate from (select title,rental_rate,length(title) as length from film
order by length desc 
limit 1) as t1;

#4.	What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? 

select avg(rental_rate) as average from film as f
join inventory as  i
on f.film_id=i.film_id
join rental as r
on i.inventory_id=r.inventory_id
where rental_date between "2005-05-05 22:04:30" and "2005-06-04 22:04:30";



#5.	What is the most popular category of films in terms of the number of rentals?

select name from category
where category_id=(select category_id from (select category_id,count(*) as total from 
(select fc.category_id,f.film_id from film as f
join film_category as fc
on f.film_id=fc.film_id) as t1
group by category_id
order by total desc limit 1) as t2);

#6.Find the longest movie duration from the list of films that have not been rented by any customer. 

select title from film
where length=(select max(length) from film);

#7.	What is the average rental rate for films, broken down by category?

select category_id,avg(rental_rate) as avg_rent
from (select fc.category_id,f.rental_rate from film as f
join film_category as fc
on f.film_id=fc.film_id) as t1
group by category_id;

#8.	What is the total revenue generated from rentals for each actor in the database? 

select fa.actor_id,sum(f.rental_rate) as total from film as f
join film_actor as fa
on f.film_id=fa.film_id
group by actor_id;

#9.Show all the actresses who worked in a film having a "Wrestler" in the description.

select concat(first_name,' ',last_name) as actresses from actor
where actor_id in
(select actor_id from film_actor
where film_id in (select film_id from film
where description like "%Wrestler%"));


#10.	Which customers have rented the same film more than once? 

select r.customer_id,f.title ,count(*) as total_count from film as f
join inventory as i
on f.film_id=i.film_id
join rental as r
on i.inventory_id=r.inventory_id
join customer as c
on r.customer_id=c.customer_id
group by customer_id,title
having total_count > 1
order by customer_id;

#11.	How many films in the comedy category have a rental rate higher than the average rental rate? 

select count(film_id) as film_count from film where film_id in 
(select film_id from film_category
where category_id=(select category_id from category
where name="Comedy")) and rental_rate > (select avg(rental_rate) from film);

#12.Which films have been rented the most by customers living in each city?

select cy.city,Max(f.title) as Maximum_rented from film as f
join inventory as i
on f.film_id=i.film_id
join rental as r
on i.inventory_id=r.inventory_id
join customer as c
on r.customer_id=c.customer_id
join address as a 
on c.address_id=a.address_id
join city as cy
on a.city_id=cy.city_id
group by cy.city;

#13.	What is the total amount spent by customers whose rental payments exceed $200? 

select customer_id,sum(amount) as total from payment
group by customer_id
having total > 200;

#14.Display the fields which are having foreign key constraints related to the "rental" table. [Hint: using Information_schema]

select * from information_schema.key_column_usage 
where constraint_schema='film_rental' and referenced_table_name='rental';




#15.	Create a View for the total revenue generated by each staff member, broken down by store city with the country name.

create view staff_total_revenue as 
select p.staff_id,sum(p.amount) as total_revenue ,c.city,co.country from payment as p
join staff as s
on p.staff_id=s.staff_id
join store as st
on s.staff_id=st.manager_staff_id
join address as ad
on st.address_id=ad.address_id
join city as c
on ad.city_id=c.city_id
join country as co
on c.country_id=co.country_id
group by p.staff_id;

select * from staff_total_revenue;



#16.	Create a view based on rental information consisting of visiting_day, customer_name, 
#the title of the film,  no_of_rental_days, the amount paid by the customer along with the percentage of customer spending.

create view rental_information as 
select concat(c.first_name,' ',c.last_name) as customer_name,
f.title,
dayname(r.rental_date) as visiting_day,
DATEDIFF(r.return_date, r.rental_date) AS no_of_rental_days,
SUM(p.amount) AS total_amount,
cs.customer_amount,
ROUND(SUM(p.amount) / cs.customer_amount * 100, 2) AS customer_spending_pct
from customer as c
join rental as r 
on c.customer_id=r.customer_id
join inventory as i
on r.inventory_id=i.inventory_id
join film as f
on i.film_id=f.film_id
join payment as p 
on r.rental_id = p.rental_id
join (SELECT customer_id, SUM(amount) as customer_amount
from payment
group by customer_id) as cs 
ON c.customer_id = cs.customer_id
group by customer_name,f.title,visiting_day,no_of_rental_days,customer_amount;

select * from rental_information;



#17.	Display the customers who paid 50% of their total rental costs within one day. 

create view rental_information as 
select concat(c.first_name,' ',c.last_name) as customer_name,
f.title,
dayname(r.rental_date) as visiting_day,
DATEDIFF(r.return_date, r.rental_date) as no_of_rental_days,
SUM(p.amount) AS total_amount,
cs.customer_amount,
ROUND(SUM(p.amount) / cs.customer_amount * 100, 2) as customer_spending_pct
from customer as c
join rental as r 
on c.customer_id=r.customer_id
join inventory as i
on r.inventory_id=i.inventory_id
join film as f
on i.film_id=f.film_id
join payment as p 
on r.rental_id = p.rental_id
join (select customer_id, SUM(amount) as customer_amount
from payment
group by customer_id) as cs 
on c.customer_id = cs.customer_id
group by customer_name,f.title,visiting_day,no_of_rental_days,customer_amount;

select customer_name
from rental_information
where customer_spending_pct>5 and no_of_rental_days=1;